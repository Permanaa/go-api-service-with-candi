// Code generated by candi v1.17.16.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"

	"go-api-service-with-candi/internal/modules/auth/domain"
	"go-api-service-with-candi/pkg/shared/usecase"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root interfaces.RESTRouter) {
	validateAnonymousToken := h.uc.Auth().ValidateAnonymousToken

	v1Auth := root.Group(candihelper.V1)

	v1Auth.POST("/auth/anonymous-token", h.postAnonymousToken, h.mw.HTTPBasicAuth)
	v1Auth.POST("/auth/login", h.postLogin, validateAnonymousToken)
}

func (h *RestHandler) postAnonymousToken(rw http.ResponseWriter, req *http.Request) {
	token, err := h.uc.Auth().GenerateAnonymousToken()
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", map[string]interface{}{
		"token":                     token,
		"expiredTokenTimeInMinutes": 60,
	}).JSON(rw)
}

func (h *RestHandler) postLogin(rw http.ResponseWriter, req *http.Request) {
	var payload domain.LoginRequest

	body, _ := io.ReadAll(req.Body)
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
	}

	resp, err := h.uc.Auth().Login(req.Context(), &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", resp).JSON(rw)
}
