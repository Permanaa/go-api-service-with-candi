// Code generated by candi v1.17.16.

package repository

import (
	"context"

	"strings"
	"time"

	"go-api-service-with-candi/internal/modules/auth/domain"
	shareddomain "go-api-service-with-candi/pkg/shared/domain"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/tracer"

	"go-api-service-with-candi/pkg/shared"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type authRepoSQL struct {
	readDB, writeDB *gorm.DB
	updateTools     *candishared.DBUpdateTools
}

// NewAuthRepoSQL mongo repo constructor
func NewAuthRepoSQL(readDB, writeDB *gorm.DB) AuthRepository {
	return &authRepoSQL{
		readDB: readDB, writeDB: writeDB,
		updateTools: &candishared.DBUpdateTools{
			KeyExtractorFunc: candishared.DBUpdateGORMExtractorKey, IgnoredFields: []string{"id"},
		},
	}
}

func (r *authRepoSQL) FetchAll(ctx context.Context, filter *domain.FilterAuth) (data []shareddomain.Auth, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AuthRepoSQL:FetchAll")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	if filter.OrderBy == "" {
		filter.OrderBy = "updated_at"
	}

	db := r.setFilterAuth(shared.SetSpanToGorm(ctx, r.readDB), filter).Order(clause.OrderByColumn{
		Column: clause.Column{Name: filter.OrderBy},
		Desc:   strings.ToUpper(filter.Sort) == "DESC",
	})
	if filter.Limit > 0 || !filter.ShowAll {
		db = db.Limit(filter.Limit).Offset(filter.CalculateOffset())
	}
	err = db.Find(&data).Error
	return
}

func (r *authRepoSQL) Count(ctx context.Context, filter *domain.FilterAuth) (count int) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AuthRepoSQL:Count")
	defer trace.Finish()

	var total int64
	r.setFilterAuth(shared.SetSpanToGorm(ctx, r.readDB), filter).Model(&shareddomain.Auth{}).Count(&total)
	count = int(total)

	trace.Log("count", count)
	return
}

func (r *authRepoSQL) Find(ctx context.Context, filter *domain.FilterAuth) (result shareddomain.User, err error) {
	err = r.setFilterAuth(shared.SetSpanToGorm(ctx, r.readDB), filter).First(&result).Error
	return
}

func (r *authRepoSQL) Save(ctx context.Context, data *shareddomain.User, updateOptions ...candishared.DBUpdateOptionFunc) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AuthRepoSQL:Save")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	data.UpdatedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	if data.ID == 0 {
		err = shared.SetSpanToGorm(ctx, db).Omit(clause.Associations).Create(data).Error
	} else {
		err = shared.SetSpanToGorm(ctx, db).Model(data).Omit(clause.Associations).Updates(r.updateTools.ToMap(data, updateOptions...)).Error
	}
	return
}

func (r *authRepoSQL) Delete(ctx context.Context, filter *domain.FilterAuth) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "AuthRepoSQL:Delete")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	err = r.setFilterAuth(shared.SetSpanToGorm(ctx, db), filter).Delete(&shareddomain.Auth{}).Error
	return
}

func (r *authRepoSQL) setFilterAuth(db *gorm.DB, filter *domain.FilterAuth) *gorm.DB {

	if filter.Email != "" {
		db = db.Where("email = ?", filter.Email)
	}
	if filter.ID != nil {
		db = db.Where("id = ?", *filter.ID)
	}
	if filter.Search != "" {
		db = db.Where("(field ILIKE '%%' || ? || '%%')", filter.Search)
	}

	for _, preload := range filter.Preloads {
		db = db.Preload(preload)
	}

	return db
}
